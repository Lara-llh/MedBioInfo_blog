[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nThis blog will cover the content of the Applied Bioinformatics course within the MedBioInfo programme.\nUppsla University - 6th to 10th October 2025"
  },
  {
    "objectID": "posts/how-to-make-a-quarto-blog/index.html",
    "href": "posts/how-to-make-a-quarto-blog/index.html",
    "title": "How to make a Quarto blog",
    "section": "",
    "text": "In this post we are going to learn how to create a Quarto blog.\n\nPart 1: Create the blog\nThe first step is to create a Quarto blog project. In order to do so, you go to View and open the Command Palette in VScode and then type Quarto: Create Project. Select Blog project and choose the name and location in your computer.\n\n\nPart 2: Edit\nCreate a new post by generating a new folder in the posts folder of your Quarto blog. Inside this new folder create a new index.qmd file.\nThis file should contain some variations of the following information between two lines of —:\n\ntitle: “Title”\nauthor: “your name”\ndate: “YYYY-MM-DD”\ncategories: []\nimage: “image.jpg”\n\nAfter this coding information you include the content you want to have in your blog.\nThere is a lot of options for the code. Some useful resorces to explore the different alternatives that you can integrate in your code are:\n\nListings\nExecutable code\nThemes\nImages formating / Lightbox figures\n\n\n\nPart 3: Publish your blog\ngit pwd - you have to make sure you are working in the directory of your blog\ngit cd “directory” - if you need to set the working directory\ngit init - to initialize the blog directory as a git repository\ngit status - to check\ngit remote add origin git@github.com:user/blogname.git\nquarto render\nquarto publish gh-pages\n\nAdd the blog to GitHub using GitHub Actions\nEnter your GitHub account and create a new repository\ngit add –all - to add all the untracked files (shown with the git status command) to the repository\ngit commit -m “message to track the changes” - to commit all the changes made\ngit push -u origin main\nFor more information on how to automate the publishing of your blog you can follow this Tutorial on using GitHub Actions."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/Working-with-environments/index.html",
    "href": "posts/Working-with-environments/index.html",
    "title": "Working with environments",
    "section": "",
    "text": "The different operating systems support different tools. In order to solve this issue, we can use environments, which wil help us make our bioinformatics work more reproducible. This environments specifiy the tools needed to perform the task and the managers inside the environment will make sure to install these tools with their dependencies so that you can run the analysis in your device.\nThere are different types of environments, like Conda, but in this course we are going to focus on Pixi."
  },
  {
    "objectID": "posts/Working-with-environments/index.html#install-pixi",
    "href": "posts/Working-with-environments/index.html#install-pixi",
    "title": "Working with environments",
    "section": "Install Pixi",
    "text": "Install Pixi\nIn order to install pixi just run the following command in your terminal:\ncurl -fsSL https://pixi.sh/install.sh | sh\nYou can find more infromation about pixi here"
  },
  {
    "objectID": "posts/Working-with-environments/index.html#create-an-environment",
    "href": "posts/Working-with-environments/index.html#create-an-environment",
    "title": "Working with environments",
    "section": "Create an environment",
    "text": "Create an environment\nTo create an environment for your project we will ask pixi to initialize a folder named pixi_training. We will also add conda-forge and bioconda channles with the -c flag.\npixi init pixi_training -c conda-forge -c bioconda\nIf you look in the new folder created you find a file called pixi.toml.\n\n1. pixi.toml\n[workspace]\nchannels = [\"conda-forge\", \"bioconda\"]\nname = \"amrei_pixi_training\"\nplatforms = [\"osx-arm64\"]\nversion = \"0.1.0\"\n\n[tasks]\n\n[dependencies]\nThis is how the pixi.tomlfile would like like after creating it. This file gives you information about your project:\n\nWorkspace: An overview of the environment: the channels that we added when we called pixi init -c, the name of the environment, the operating system and the version.\nTasks (not covered)\nDependencies: it will list the different tools that you install within the environment.\n\n\n\n2. pixi.lock\nAdding a tool or a dependency to the environemnt will generate another file called pixi.lock.\nThis file contains information about the channels added to you environment, where the packages were dowloaded from, liceses information and more.\n\n\n\n\n\n\nDO NOT DELETE pixi.tomlor pixi.lock files, it will break your environment!"
  },
  {
    "objectID": "posts/Working-with-environments/index.html#adding-dependencies",
    "href": "posts/Working-with-environments/index.html#adding-dependencies",
    "title": "Working with environments",
    "section": "Adding dependencies",
    "text": "Adding dependencies\nThe comand pixi add will tell Pixi to install a specified program for you and it will be added to the dependencies list found in the pixi.toml file that we talked about in the previous section.\npwd\ncd pixi_training\npixi add quarto\nIf we now check the dependencies in the pixi.toml file we would see the new program added quarto = \"&gt;=1.7.32,&lt;2\"(the versions might be different)."
  },
  {
    "objectID": "posts/Working-with-environments/index.html#running-a-package",
    "href": "posts/Working-with-environments/index.html#running-a-package",
    "title": "Working with environments",
    "section": "Running a package",
    "text": "Running a package\nIn order to run a package we use the run command followed by the package.\npixi run quarto --help\nYou can substitute quarto with any other package followed by the pertinent commands."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How to make a quatro blog",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\nnews\n\n\n\n\n\n\n\nTristan O’Malley\n\n\nOct 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\nHarlow Malloc\n\n\nOct 6, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to use and create containers\n\n\n\ncode\n\n\n\n\n\n\n\nLara Leal\n\n\nOct 6, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to make a Quarto blog\n\n\n\ncode\n\n\n\n\n\n\n\nLara Leal\n\n\nOct 6, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with environments\n\n\n\ncode\n\n\n\n\n\n\n\nLara Leal\n\n\nOct 7, 2025\n\n\n\n\n\n\nNo matching items"
  }
]