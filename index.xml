<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>MedBioInfo Applied Bioinformatics blog by Lara</title>
<link>https://Lara-llh.github.io/MedBioInfo_blog/</link>
<atom:link href="https://Lara-llh.github.io/MedBioInfo_blog/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog built with Quarto</description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Wed, 08 Oct 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Nextflow Intro</title>
  <dc:creator>Lara Leal</dc:creator>
  <link>https://Lara-llh.github.io/MedBioInfo_blog/posts/Nextflow Intro/</link>
  <description><![CDATA[ 






<p><img src="https://Lara-llh.github.io/MedBioInfo_blog/posts/Nextflow Intro/Nextflow.png" class="post-header img-fluid"></p>
<p>Workflow managers allow you to develop an automated pipeline from your scripts that can then be run on a variety of systems.</p>
<p>The manager then coordinates the deployment of the scripts in the appropriate sequence, monitors the jobs, handles the file transfers between scripts, gathers the output, and handles re-execution of failed jobs for you. Workflow managed pipelines can run containers, which eliminates software installation and version conflicts.</p>
<p>There are two main workflow managers: <a href="https://www.snakemake.io">snakemake</a> and <a href="https://www.nextflow.io">nextflow</a>.</p>
<section id="nextflow" class="level2">
<h2 class="anchored" data-anchor-id="nextflow"><strong>Nextflow</strong></h2>
<p>In nextflow, your scripts are turned into processes, connected by channels that contain the data - input, output etc. The order of the processes, and their interaction with each other, is specfied in the workflow scope.</p>
<p><img src="https://Lara-llh.github.io/MedBioInfo_blog/posts/Nextflow Intro/channel-process_fqc.png" class="img-fluid"></p>
<p>Important things about nextflow: - 1. The <code>script</code> can be written in any language. - The modularity of the process allows to re-use existing scripts and processes easily. - 2. The functional processes are separated from the executive ones, therefore the pipelines are higly interoperable and portable. - 3. Pipelines can be very reproducible if they are integrated with version control tools (like git or bitbucket) and container technologies (apptainer or docker). - 4. They are scalable, you can strat testing with just a couple of samples and easily scale up to hundreds or thusands. Processes are run in parallele automatically when possible. - 5. It resumes executions. Autimatically checks the processes and can resume from a point of failure without having to re-compute already completed parts. - 6. It’s open source.</p>


</section>

 ]]></description>
  <category>info</category>
  <guid>https://Lara-llh.github.io/MedBioInfo_blog/posts/Nextflow Intro/</guid>
  <pubDate>Wed, 08 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://Lara-llh.github.io/MedBioInfo_blog/posts/Nextflow Intro/Nextflow.png" medium="image" type="image/png" height="23" width="144"/>
</item>
<item>
  <title>Working with environments</title>
  <dc:creator>Lara Leal</dc:creator>
  <link>https://Lara-llh.github.io/MedBioInfo_blog/posts/Working-with-environments/</link>
  <description><![CDATA[ 






<p><img src="https://Lara-llh.github.io/MedBioInfo_blog/posts/Working-with-environments/pixi.webp" class="post-header img-fluid"></p>
<p>The different operating systems support different tools. In order to solve this issue, we can use environments, which wil help us make our bioinformatics work more reproducible. This environments specifiy the tools needed to perform the task and the managers inside the environment will make sure to install these tools with their dependencies so that you can run the analysis in your device.</p>
<p>There are different types of environments, like Conda, but in this course we are going to focus on Pixi.</p>
<section id="install-pixi" class="level2">
<h2 class="anchored" data-anchor-id="install-pixi">Install Pixi</h2>
<p>In order to install pixi just run the following command in your terminal:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-fsSL</span> https://pixi.sh/install.sh <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span></span></code></pre></div></div>
<p>You can find more infromation about pixi <a href="https://pixi.sh/latest/installation/">here</a></p>
</section>
<section id="create-an-environment" class="level2">
<h2 class="anchored" data-anchor-id="create-an-environment">Create an environment</h2>
<p>To create an environment for your project we will ask pixi to initialize a folder named <code>pixi_training</code>. We will also add conda-forge and bioconda channles with the <code>-c</code> flag.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> init pixi_training <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> conda-forge <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> bioconda</span></code></pre></div></div>
<p>If you look in the new folder created you find a file called <code>pixi.toml</code>.</p>
<section id="pixi.toml" class="level4">
<h4 class="anchored" data-anchor-id="pixi.toml"><strong>1. pixi.toml</strong></h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[workspace]</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">channels</span> = [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conda-forge"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bioconda"</span>]</span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">name</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amrei_pixi_training"</span></span>
<span id="cb3-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">platforms</span> = <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"osx-arm64"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">version</span> = <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[tasks]</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[dependencies]</span></span></code></pre></div></div>
<p>This is how the <code>pixi.toml</code>file would like like after creating it. This file gives you information about your project:</p>
<ul>
<li>Workspace: An overview of the environment: the channels that we added when we called <code>pixi init -c</code>, the name of the environment, the operating system and the version.</li>
<li>Tasks (not covered)</li>
<li>Dependencies: it will list the different tools that you install within the environment.</li>
</ul>
</section>
<section id="pixi.lock" class="level4">
<h4 class="anchored" data-anchor-id="pixi.lock"><strong>2. pixi.lock</strong></h4>
<p>Adding a tool or a dependency to the environemnt will generate another file called <code>pixi.lock</code>.</p>
<p>This file contains information about the channels added to you environment, where the packages were dowloaded from, liceses information and more.</p>
<div class="callout callout-style-simple callout-none no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>DO NOT DELETE <code>pixi.toml</code>or <code>pixi.lock</code> files, it will break your environment!</p>
</div>
</div>
</div>
</section>
</section>
<section id="adding-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="adding-dependencies">Adding dependencies</h2>
<p>The comand <code>pixi add</code> will tell Pixi to install a specified program for you and it will be added to the dependencies list found in the <code>pixi.toml</code> file that we talked about in the previous section.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pwd</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> pixi_training</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> add quarto</span></code></pre></div></div>
<p>If we now check the dependencies in the <code>pixi.toml</code> file we would see the new program added <code>quarto = "&gt;=1.7.32,&lt;2"</code>(the versions might be different).</p>
</section>
<section id="running-a-package" class="level2">
<h2 class="anchored" data-anchor-id="running-a-package">Running a package</h2>
<p>In order to run a package we use the <code>run</code> command followed by the package.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run quarto <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span></span></code></pre></div></div>
<p>You can substitute <code>quarto</code> with any other package followed by the pertinent commands.</p>


</section>

 ]]></description>
  <category>code</category>
  <guid>https://Lara-llh.github.io/MedBioInfo_blog/posts/Working-with-environments/</guid>
  <pubDate>Tue, 07 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://Lara-llh.github.io/MedBioInfo_blog/posts/Working-with-environments/pixi_cover.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>How to use and create containers</title>
  <dc:creator>Lara Leal</dc:creator>
  <link>https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-use-and-create-containers/</link>
  <description><![CDATA[ 






<p><img src="https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-use-and-create-containers/containers.jpg.jpg" class="post-header img-fluid"></p>
<p>Reproducibility in bioinformatics can be a big problem. The same code can be runned by you in you computer and give some results, and when given to someone else it gives other results or it doesn’t fully work.</p>
<p>In order to resolve this issue, different tools were developed. You can use environments or containers.</p>
<div class="callout callout-style-simple callout-none no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<ul>
<li><strong>Environments:</strong> they conform an isolated system that contains all the necessary software (operating system, libraries, tools, packages…) needed to run the task in hand.</li>
<li><strong>Containers:</strong> they are stand-alone software pieces that specify the operating system, all dependencies and software of an isolated environment. They are built and exchanged as container images and need a container management tool to take this images and build the container. This container images are immutable and therefore stables over time.</li>
</ul>
</div>
</div>
</div>
<section id="containers" class="level2">
<h2 class="anchored" data-anchor-id="containers">CONTAINERS</h2>
<p>There are different programs taht can be use to build and run containers: <a href="https://www.docker.com">Docker</a>, <a href="https://apptainer.org">Appptainer</a> or <a href="https://podman.io">Podman</a> are the most widely used.</p>
<section id="how-to-obtain-these-containers" class="level3">
<h3 class="anchored" data-anchor-id="how-to-obtain-these-containers"><strong>1. How to obtain these containers</strong></h3>
<p>There are several repositories in which people publish container images, two of the most commonly used are: <a href="https://hub.docker.com">Dockerhub</a> and <a href="https://seqera.io/containers/">Seqera</a>.</p>
<section id="dockerhub" class="level4">
<h4 class="anchored" data-anchor-id="dockerhub">Dockerhub</h4>
<p>Once you access their webpage (no need to create an account), you can search for the software that you need. In this case we are looking for <strong>VCFtools</strong>. This software is used for VCF manipulation and querying.</p>
<div class="callout callout-style-simple callout-none no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>VCF manipulation and querying refers to the processes of altering (manipulating) and extracting (querying) specific information from Variant Call Format (VCF) files, which are standardized text files used in bioinformatics to store and report genomic variations in sequenced samples. - Manipulation involves functions to read, write, or modify VCF data. - Querying involves selecting and formatting subsets of the data for analysis, quality control, or visualization.</p>
</div>
</div>
</div>
<p>After going to dockerhub and choosing one container, we copy the pull comand and run the following in the project server:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> pull vcftools_0.1.16-1.sif docker://biocontainers/vcftools:v0.1.16-1-deb_cv1</span></code></pre></div></div>
</section>
<section id="seqera" class="level4">
<h4 class="anchored" data-anchor-id="seqera">Seqera</h4>
<p>In the case of Seqera, users don’t upload their containers, but they develop container images as you request them.</p>
<p>To pull an image from this repository you need to set the container setting to Singularity (Apptainer old name).</p>
<p>Make sure the container is compiled before trying to pull it!!</p>
<p>Once it’s ready you can copy the text and pull it to your system with the following command:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> pull vcftools_0.1.17.sif oras://community.wave.seqera.io/library/vcftools:0.1.17--b541aa8d9f9213f9</span></code></pre></div></div>
</section>
</section>
<section id="running-containers" class="level3">
<h3 class="anchored" data-anchor-id="running-containers"><strong>2. Running Containers</strong></h3>
<p>Apptainer can be used to build the container from the image. Then you can either enter the container and run as if you had the exact same operating system as the person who built it, or you can run the software inside the container from outside of the container.</p>
<section id="running-from-the-outside" class="level4">
<h4 class="anchored" data-anchor-id="running-from-the-outside">Running from “the outside”</h4>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> exec vcftools_0.1.17.sif vcftools <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span></code></pre></div></div>
<p>You can use <code>run</code>or <code>exec</code> to use the container. Note than using <code>run</code>it will launch the container and first run the <code>%runscript</code> if one is defined and then run you command.</p>
</section>
<section id="running-interactively-from-the-inside" class="level4">
<h4 class="anchored" data-anchor-id="running-interactively-from-the-inside">Running interactively from “the inside”</h4>
<p>There is also the possibility to enter the container and work interactively within it.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> shell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>name-of-container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div></div>
<p>Remember that the container is a isolated system and if you want to use files from outside you will need to bind file paths using <code>-B</code>.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> shell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>name-of-container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> shell <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-B</span> outside/path:inside/path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>name-of-container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div></div>
<p>To exit the container type <code>exit</code> and enter.</p>
</section>
<section id="running-containers-with-sbatch" class="level4">
<h4 class="anchored" data-anchor-id="running-containers-with-sbatch">Running containers with sbatch</h4>
<p>Apptainer containers can be run as part of a batch job if you integrate them int a SLURM job submission script.</p>
<p>We are going to add the container to our <code>FastQC</code>sbatch script.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#! /bin/bash -l</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#SBATCH -A project_ID</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#SBATCH -t 30:00</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#SBATCH -n 1</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> exec container_image.sif fastqc <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--noextract</span> ../data/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>fastq.gz</span></code></pre></div></div>
</section>
</section>
<section id="run-your-own-container" class="level3">
<h3 class="anchored" data-anchor-id="run-your-own-container"><strong>3. Run your own container</strong></h3>
<p>This is a computationally intesnive task. The containers are build froma definition file (<code>.def</code>extension).</p>
<p>Let´s build a container with a cow telling us the date!</p>
<p>Create a file called <code>lolcow.def</code> and add the following:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Bootstrap:</span> docker</span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">From:</span> ubuntu:20.04</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%post</span></span>
<span id="cb7-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> update</span>
<span id="cb7-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> install cowsay lolcat fortune</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%environment</span></span>
<span id="cb7-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">LC_ALL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>C</span>
<span id="cb7-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/usr/games:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">%runscript</span></span>
<span id="cb7-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cowsay</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lolcat</span>    </span></code></pre></div></div>
<p>Then to build the conrainer use:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> build lolcow.sif lolcow.def</span></code></pre></div></div>
<p>You will get information on the staus of the build and it will tell you when it´s ready.</p>
<p>Then you can run your new container:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> run lolcow.sif</span></code></pre></div></div>
<p>If you want you can change the <code>%runscript</code>from your <code>lolcow.def</code> file and change <code>date</code>for <code>fortune</code>. Now you will get the same cow but with a tale.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-use-and-create-containers/</guid>
  <pubDate>Tue, 07 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-use-and-create-containers/containers.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://Lara-llh.github.io/MedBioInfo_blog/posts/post-with-code/</link>
  <description><![CDATA[ 






<p>This is a post with executable code.</p>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://Lara-llh.github.io/MedBioInfo_blog/posts/post-with-code/</guid>
  <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://Lara-llh.github.io/MedBioInfo_blog/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>How to make a Quarto blog</title>
  <dc:creator>Lara Leal</dc:creator>
  <link>https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-make-a-quarto-blog/</link>
  <description><![CDATA[ 






<p><img src="https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-make-a-quarto-blog/quartoblogimage.jpg" class="post-header img-fluid"></p>
<p>In this post we are going to learn how to create a Quarto blog.</p>
<section id="part-1-create-the-blog" class="level1">
<h1><strong>Part 1: Create the blog</strong></h1>
<p>The first step is to create a Quarto blog project. In order to do so, you go to View and open the Command Palette in VScode and then type Quarto: Create Project. Select Blog project and choose the name and location in your computer.</p>
</section>
<section id="part-2-edit" class="level1">
<h1><strong>Part 2: Edit</strong></h1>
<p>Create a new post by generating a new folder in the posts folder of your Quarto blog. Inside this new folder create a new index.qmd file.</p>
<p>This file should contain some variations of the following information between two lines of —:</p>
<ul>
<li>title: “Title”</li>
<li>author: “your name”</li>
<li>date: “YYYY-MM-DD”</li>
<li>categories: []</li>
<li>image: “image.jpg”</li>
</ul>
<p>After this coding information you include the content you want to have in your blog.</p>
<p>There is a lot of options for the code. Some useful resorces to explore the different alternatives that you can integrate in your code are:</p>
<ul>
<li><a href="https://quarto.org/docs/websites/website-listings.html">Listings</a></li>
<li><a href="https://quarto.org/docs/output-formats/html-code.html">Executable code</a></li>
<li><a href="https://quarto.org/docs/output-formats/html-themes.html">Themes</a></li>
<li><a href="https://quarto.org/docs/output-formats/html-lightbox-figures.html">Images formating / Lightbox figures</a></li>
</ul>
</section>
<section id="part-3-publish-your-blog" class="level1">
<h1><strong>Part 3: Publish your blog</strong></h1>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> pwd <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> you have to make sure you are working in the directory of your blog</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> cd <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"directory"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> if you need to set the working directory</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> init <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> to initialize the blog directory as a git repository</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> status <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> to check </span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> remote add origin git@github.com:user/blogname.git</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> render</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> publish gh-pages </span></code></pre></div></div>
<section id="add-the-blog-to-github-using-github-actions" class="level3">
<h3 class="anchored" data-anchor-id="add-the-blog-to-github-using-github-actions">Add the blog to GitHub using GitHub Actions</h3>
<p>Enter your GitHub account and create a new repository</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> to add all the untracked files <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shown</span> with the git status command<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">to</span> the repository</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message to track the changes"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span> to commit all the changes made</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> origin main</span></code></pre></div></div>
<div class="callout callout-style-simple callout-none no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>You have to follow this three steps every time you make changes in your Quarto blog and want to push them to your GitHub repository.</p>
</div>
</div>
</div>
<p>For more information on how to automate the publishing of your blog you can follow this <a href="https://quarto.org/docs/publishing/github-pages.html#github-action">Tutorial on using GitHub Actions.</a></p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <guid>https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-make-a-quarto-blog/</guid>
  <pubDate>Mon, 06 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://Lara-llh.github.io/MedBioInfo_blog/posts/how-to-make-a-quarto-blog/quartoblogimage.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Tristan O&#39;Malley</dc:creator>
  <link>https://Lara-llh.github.io/MedBioInfo_blog/posts/welcome/</link>
  <description><![CDATA[ 






<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://Lara-llh.github.io/MedBioInfo_blog/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://Lara-llh.github.io/MedBioInfo_blog/posts/welcome/</guid>
  <pubDate>Fri, 03 Oct 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
